@use "sass:map";
@use "sass:string";

@use "./palettes/blue" as *;
@use "./common/elevation.scss" as *;

$vars: ();
$lob: elv !default;

@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

@function v2c($var) {
    @debug $var;
    @return map.get($vars, str-replace(str-replace($var, ")", ""), "var(--ds-", ""));
}

@mixin fontFace($fontName, $fontUrl, $font-weight, $font-ext, $font-style, $font-format) {
    @font-face {
        @font-face {
            font-family: $fontName;
            src: url($fontUrl + "." + $font-ext) format($font-format);
            font-weight: $font-weight;
            font-style: $font-style;
            font-smoothing: subpixel-antialiased;
        }
    }
}

@function wrappetFontPath($basePath, $file) {
    @return $basePath + "/font" + "/" + $file;
}

@mixin ds-theme($colors, $fonts: (), $fontPath: "../..") {
    $vars: map.merge($colors, $fonts) !global;

    @if $fonts {
        @each $font, $details in $fonts {
            @include fontFace(
                map.get($details, name),
                wrappetFontPath($fontPath, map.get($details, file)) map.get($details, weight),
                map.get($details, style),
                map.get($details, ext),
                map.get($details, format)
            );
        }
    }

    @each $var, $value in $vars {
        @if type-of($value) == "color" {
            #{"--ds-"+ $var}: $value;
        }
        @if type-of($value) == "map" {
            #{"--ds-"+ $var}: map.get($value, "name");
        }
    }

    @each $var, $elevation in $elevations {
        #{"--ds-"+ $var}: string.unquote(map.get($elevation, $lob));
    }
    // #{"--ds-el-1"}: 0px 1px 3px 0px rgba(0,0,0,0.20),0px 2px 2px 0px rgba(0,0,0,0.12),0px 0px 2px 0px rgba(0,0,0,0.14);
    // #{"--ds-el-2"}: 0px 1px 3px 0px rgba(0,0,0,0.20),0px 2px 2px 0pxrgba(0,0,0,0.12),0px 2px 4px 0px rgba(0,0,0,0.14);
    // #{"--ds-el-3"}: 0px 1px 10px 0px rgba(0,0,0,0.20),0px 4px 5px 0px rgba(0,0,0,0.12),0px 2px 4px 0px rgba(0,0,0,0.14);
    // #{"--ds-el-4"}: 0px 3px 5px 0px rgba(0,0,0,0.20),0px 1px 18px 0px rgba(0,0,0,0.12),0px 6px 10px 0px rgba(0,0,0,0.14);
}

@function hexToRba($variable, $alpha) {
    $red: red($variable);
    $green: green($variable);
    $blue: blue($variable);

    $rgbaValue: rgba($red, $green, $blue, $alpha);
    // @debug  $rgbaValue;
    @return $rgbaValue;
}

$CB0: var(--ds-base-0);
$CB1: var(--ds-base-1);
$CP1: var(--ds-primary-1);
$CP2: var(--ds-primary-2);
$CP3: var(--ds-primary-3);
$CP4: var(--ds-primary-4);
$CP5: var(--ds-primary-5);
$CP6: var(--ds-primary-6);
$CG1: var(--ds-gray-1);
$CG2: var(--ds-gray-2);
$CG3: var(--ds-gray-3);
$CG4: var(--ds-grays-4);
$CS4: var(--ds-success);
$CE4: var(--ds-error);
$CC4: var(--ds-caution);
$CI4: var(--ds-info);

// Box-shadows:

$EL1: var(--ds-elevation-xs);
$EL2: var(--ds-elevation-sm);
$EL3: var(--ds-elevation-md);
$EL4: var(--ds-elevation-lg);

